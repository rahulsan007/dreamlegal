// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  type          String          @default("user")
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  companyInfo companyInfo[]
  Product     Product[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Otp {
  id        String   @id @default(cuid())
  email     String
  otp       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model companyInfo {
  id                        String    @id @default(cuid())
  userId                    String
  companyName               String
  website                   String?
  yearFounded               String
  headQuaters               String
  NameOfFounders            String
  contact                   String
  founderVision             String
  regionServed              String?
  TeamSize                  String
  Awards                    String?
  PointOfContactName        String
  PointOfContactPhone       String
  PointOfContactDesignation String
  user                      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Product                   Product[]
}

model Product {
  id                      String      @id @default(cuid())
  userId                  String
  companyId               String
  name                    String
  logoUrl                 String
  active                  String      @default("draft")
  category                String[]
  deployement             String[]
  mobileAvailable         String?
  focusCountries          String[]
  avgTimeAdoption         String?
  languages               String[]
  securityCertificate     String?
  integration             String[]
  description             String?
  usp                     String?
  upcomingUpdates         String?
  userCategory            String[]
  userCategoryPercentage  String[]
  industry                String[]
  industryPercentage      String[]
  practiceAreas           String[]
  practiceAreasPercentage String[]
  teamSize                String[]
  teamsizePercentage      String[]
  processLifecycle        Json?
  features                Json?
  freeTrial               String?
  timePeriod              String?
  freeVersion             String?
  pricingModel            String[]
  contractPeriod          String?
  nameofPlan              String[]
  validity                String[]
  price                   String[]
  pricingParams           String[]
  Demo                    String[]
  DemoNote                String?
  support                 String[]
  supportNote             String?
  training                String[]
  trainingNote            String?
  storage                 String[]
  storageNote             String?
  fileSize                String[]
  fileSizeNote            String?
  maintenance             String?
  maintenanceNote         String?
  reqForChange            String?
  reqForChangeNote        String?
  trainingReq             String?
  trainingReqNote         String?
  dataMigration           String?
  dataMigrationNote       String?
  Images                  String[]
  videoUrl                String?
  attachments             String[]
  youtubeUrl              String?
  linkedinUrl             String?
  twitterUrl              String?
  instagramUrl            String?
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  user                    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  company                 companyInfo @relation(fields: [companyId], references: [id], onDelete: Cascade)
}
